--region Bank Tables

createDepositedTokensTable:
CREATE TABLE IF NOT EXISTS deposited_tokens (
    u BLOB NOT NULL,
    g BLOB NOT NULL,
    a BLOB NOT NULL,
    r BLOB NOT NULL,
    aPrime BLOB NOT NULL,
    t TEXT NOT NULL,
    gamma BLOB NOT NULL,
    challenge BLOB NOT NULL,
    PRIMARY KEY (u, g, a, r, aPrime, t)
);

addDepositedToken:
INSERT INTO deposited_tokens (u, g, a, r, aPrime, t, gamma, challenge)
VALUES(?, ?, ?, ?, ?,?, ?, ?);

getAllDepositedTokens:
SELECT *
FROM deposited_tokens;

getDepositedToken:
SELECT *
FROM deposited_tokens
WHERE u = ?
    AND g = ?
    AND a = ?
    AND r = ?
    AND aPrime = ?
    AND t = ?;
-- endRegion Bank Tables

-- region User Tables
createOwnedTokenTable:
CREATE TABLE IF NOT EXISTS owned_tokens (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    u BLOB NOT NULL,
    g BLOB NOT NULL,
    a BLOB NOT NULL,
    r BLOB NOT NULL,
    aPrime BLOB NOT NULL,
    t TEXT NOT NULL,
    w BLOB NOT NULL,
    y BLOB NOT NULL,
    bankID INTEGER NOT NULL,
    FOREIGN KEY (bankID) REFERENCES bank_registrations (id) ON DELETE CASCADE,
    UNIQUE (u, g, a, r, aPrime, t)
);

addToken:
INSERT INTO owned_tokens(u, g, a, r, aPrime, t, w, y, bankID)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

getTokenById:
SELECT *
FROM owned_tokens
WHERE id = ?;

getAllTokens:
SELECT *
FROM owned_tokens;

removeAllTokens:
DELETE FROM owned_tokens;

removeTokenById:
DELETE
FROM owned_tokens
WHERE id = ?;

createBankRegistrationTable:
CREATE TABLE IF NOT EXISTS bank_registrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    bankName TEXT UNIQUE NOT NULL,
    z BLOB NOT NULL,
    eb BLOB NOT NULL,
    nb BLOB NOT NULL,
    publicKey BLOB NOT NULL,
    m BLOB,
    rm BLOB,
    userName TEXT,
    v BLOB,
    r BLOB
);

addNewBank:
INSERT INTO bank_registrations(bankName, z, eb, nb, publicKey)
VALUES (?, ?, ?, ?, ?);

getBankRegistrationByName:
SELECT *
FROM bank_registrations
WHERE bankName LIKE ?;

getBankRegistrationById:
SELECT *
FROM bank_registrations
WHERE id = ?;

getBankRegistrations:
SELECT *
FROM bank_registrations;


setOwnValuesForBank:
UPDATE bank_registrations
SET m = ?, rm = ?, userName = ?
WHERE bankName LIKE ?;

setBankRegistrationValues:
UPDATE bank_registrations
SET v = ?, r = ?
WHERE bankName LIKE ?;

clearAllRegisteredBanks:
DELETE FROM bank_registrations;

createUnsignedTokenTable:
CREATE TABLE IF NOT EXISTS unsigned_tokens (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    a BLOB NOT NULL,
    c BLOB NOT NULL,
    bigA BLOB NOT NULL,
    beta1 BLOB NOT NULL,
    beta2 BLOB NOT NULL,
    l BLOB NOT NULL,
    u BLOB NOT NULL,
    g BLOB NOT NULL,
    y BLOB NOT NULL,
    w BLOB NOT NULL,
    bankID INTEGER NOT NULL,
    status INTEGER NOT NULL,
    FOREIGN KEY (bankID) REFERENCES bank_registrations (id) ON DELETE CASCADE
);

addUnsignedToken:
INSERT INTO unsigned_tokens (a, c, bigA, beta1, beta2, l, u, g, y, w, bankID, status)
VALUES (?, ?, ?, ?, ?, ?, ? ,?, ?, ?, ?, ?);

updateStatusById:
UPDATE unsigned_tokens
SET status = ?
WHERE id = ?;

getUnsignedTokensByIds:
SELECT *
FROM unsigned_tokens
WHERE id IN ?;

getUnsignedTokensById:
SELECT *
FROM unsigned_tokens
WHERE id = ?;

createReceiptsTable:
CREATE TABLE IF NOT EXISTS receipts (
    u BLOB NOT NULL,
    g BLOB NOT NULL,
    a BLOB NOT NULL,
    r BLOB NOT NULL,
    aPrime BLOB NOT NULL,
    t TEXT NOT NULL,
    challenge BLOB NOT NULL,
    gamma BLOB NOT NULL,
    bankId INTEGER NOT NULL,
    FOREIGN KEY (bankId) REFERENCES bank_registrations (id) ON DELETE CASCADE,
    UNIQUE (u, g, a, r, aPrime, t)
);

addReceipt:
INSERT INTO receipts (u, g, a, r, aPrime, t, challenge, gamma, bankId)
VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?);

getReceiptsByBankId:
SELECT *
FROM receipts
WHERE bankId = ?;

getAllReceipts:
SELECT *
FROM receipts;

removeReceiptsByBankId:
DELETE
FROM receipts
WHERE bankId = ?;
-- endRegion User Tables
getChanges:
SELECT changes();

getLastInsertedId:
SELECT last_insert_rowid();